{"remainingRequest":"E:\\娱乐\\代码\\地图\\vuechinamap\\node_modules\\babel-loader\\lib\\index.js!E:\\娱乐\\代码\\地图\\vuechinamap\\node_modules\\cache-loader\\dist\\cjs.js??ref--1-0!E:\\娱乐\\代码\\地图\\vuechinamap\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!E:\\娱乐\\代码\\地图\\vuechinamap\\src\\components\\chinaMap.vue?vue&type=script&lang=js&","dependencies":[{"path":"E:\\娱乐\\代码\\地图\\vuechinamap\\src\\components\\chinaMap.vue","mtime":1722133434859},{"path":"E:\\娱乐\\代码\\地图\\vuechinamap\\babel.config.js","mtime":1721908005329},{"path":"E:\\娱乐\\代码\\地图\\vuechinamap\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1721908837627},{"path":"E:\\娱乐\\代码\\地图\\vuechinamap\\node_modules\\babel-loader\\lib\\index.js","mtime":1721908838903},{"path":"E:\\娱乐\\代码\\地图\\vuechinamap\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1721908837627},{"path":"E:\\娱乐\\代码\\地图\\vuechinamap\\node_modules\\vue-loader\\lib\\index.js","mtime":1721908835548}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"mappings":"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","names":["mixins","props","chartsHeight","type","require","default","echartsData","scatterData","visualColor","zoom","visualText","cityMapName","data","citylist","中国","lastCity","currentMapName","methods","initCharts","tooltip","show","trigger","alwaysShowContent","backgroundColor","padding","roam","hideDelay","triggerOn","enterable","borderColor","confine","textStyle","color","fontSize","width","height","overflow","showDelay","formatter","geo","map","label","normal","emphasis","itemStyle","borderWidth","areaColor","x","y","r","colorStops","offset","globalCoord","shadowColor","shadowOffsetX","shadowOffsetY","shadowBlur","series","geoIndex","coordinateSystem","symbol","legendHoverLink","symbolSize","borderRadius","showEffectOn","rippleEffect","brushType","hoverAnimation","zlevel","visualMap","max","text","calculable","seriesIndex","inRange","bottom","right","graphic","style","fill","font","onclick","option","echarts","name","code","mapClick"],"sourceRoot":"src/components","sources":["chinaMap.vue"],"sourcesContent":["<template>\r\n  <div ref=\"ct\" style=\"width: 100%\" class=\"chinaMapBox\">\r\n    <div ref=\"charts\" :style=\"{ height: chartsHeight }\" />\r\n  </div>\r\n</template>\r\n<script>\r\nimport * as echarts from \"echarts\";\r\nimport mixins from \"./mixins\";\r\nimport { getMap } from \"./maputils\";\r\nexport default {\r\n  mixins: [mixins],\r\n  props: {\r\n    chartsHeight: {\r\n      type: String,\r\n      require: false,\r\n      default: \"800px\",\r\n    },\r\n    echartsData: {\r\n      type: Array,\r\n      require: false,\r\n      default: () => [],\r\n    },\r\n    scatterData: {\r\n      type: Array,\r\n      require: false,\r\n      default: () => [],\r\n    },\r\n    visualColor: {\r\n      type: Array,\r\n      require: false,\r\n      default: () => [ \"rgba(207, 235, 248, 0.8)\", \"rgba(207, 235, 248, 1)\" ],\r\n    },\r\n    zoom: {\r\n      type: Number,\r\n      require: false,\r\n      default: 1,\r\n    },\r\n    visualText: {\r\n      type: Array,\r\n      require: false,\r\n      default: () => [\"高\", \"低\"],\r\n    },\r\n    cityMapName: {\r\n      type: String,\r\n      require: false,\r\n      default: \"中国\",\r\n    },\r\n  },\r\n\r\n  data() {\r\n    return {\r\n      citylist: [{ 中国: \"401200965\" }],\r\n      lastCity: {},\r\n      currentMapName:\"china\"\r\n    };\r\n  },\r\n  methods: {\r\n    initCharts() {\r\n      // if (this.chartsData.length === 0) return;\r\n      this.charts = echarts.init(this.$refs[\"charts\"]);\r\n      const option = {\r\n        // 背景颜色\r\n        // backgroundColor: \"#404a59\",\r\n        // 提示浮窗样式\r\n        tooltip: {\r\n          show: true,\r\n          trigger: \"item\",\r\n          alwaysShowContent: false,\r\n          backgroundColor: \"rgba(0, 0, 0, 0.7)\",\r\n          padding: [0, 10, 8, 10],\r\n          roam: true,\r\n          hideDelay: 100,\r\n          triggerOn: \"mousemove\",\r\n          enterable: true,\r\n          borderColor: \"rgba(0, 0, 0, 0.7)\",\r\n          //解决浮窗被遮挡\r\n          confine: true,\r\n          textStyle: {\r\n            color: \"#fff\",\r\n            fontSize: \"12\",\r\n            width: 20,\r\n            height: 30,\r\n            overflow: \"break\",\r\n          },\r\n          showDelay: 50,\r\n          formatter: (params) => {\r\n            if (params.data.tag){\r\n              return `<p style=\"text-align:center;line-height: 30px;height:30px;font-size: 14px;border-bottom: 1px solid #7A8698;\">${params.name}</p>\r\n              <div style=\"line-height:22px;margin-top:5px\">旅行次数<span style=\"margin-left:12px;color:#fff;float:right\">${params.data?.tag || \"--\"}</span></div>`;\r\n            }else{\r\n              return `<p style=\"text-align:center;line-height: 30px;height:30px;font-size: 14px;border-bottom: 1px solid #7A8698;\">${params.name}</p>\r\n              <div style=\"line-height:22px;margin-top:5px\">旅行次数<span style=\"margin-left:12px;color:#fff;float:right\">${params.data?.value || \"--\"}</span></div>`;\r\n            }\r\n            },\r\n        },\r\n        // 地图配置文字显示\r\n        geo: {\r\n          map: \"china\",\r\n          // 禁止地图放大缩小\r\n          roam: true,\r\n          zoom: this.zoom,\r\n          label: {\r\n            // 通常状态下的样式\r\n            normal: {\r\n              show: false,\r\n              textStyle: {\r\n                color: \"#ffffff\",\r\n              },\r\n            },\r\n            // 鼠标放上去的样式\r\n            emphasis: {\r\n              show: true,\r\n              textStyle: {\r\n                color: \"#000064\",\r\n              },\r\n            },\r\n          },\r\n          // 地图区域的样式设置\r\n          itemStyle: {\r\n            normal: {\r\n              borderColor: \"rgba(147, 235, 248, 1)\",\r\n              borderWidth: 1,\r\n              areaColor: {\r\n                type: \"radial\",\r\n                x: 0.5,\r\n                y: 0.5,\r\n                r: 0.8,\r\n                colorStops: [\r\n                  {\r\n                    offset: 0,\r\n                    color: \"rgba(147, 235, 248, 0)\", // 0% 处的颜色\r\n                  },\r\n                  {\r\n                    offset: 1,\r\n                    color: \"rgba(147, 235, 248, .2)\", // 100% 处的颜色\r\n                  },\r\n                ],\r\n                globalCoord: false, // 缺省为 false\r\n              },\r\n              shadowColor: \"rgba(128, 217, 248, 1)\",\r\n              shadowOffsetX: -2,\r\n              shadowOffsetY: 2,\r\n              shadowBlur: 10,\r\n            },\r\n            // 鼠标放上去高亮的样式\r\n            emphasis: {\r\n              areaColor: \"rgba(147, 235, 248, 1)\",\r\n              borderWidth: 0,\r\n            },\r\n          },\r\n        },\r\n        series: [\r\n          {\r\n            type: \"map\",\r\n            roam: true,\r\n            zoom: 1,\r\n            geoIndex: 0,\r\n            label: {\r\n              // 通常状态下的样式\r\n              normal: {\r\n                show: true,\r\n                textStyle: {\r\n                  color: \"#fff\",\r\n                },\r\n              },\r\n              // 鼠标放上去的样式\r\n              emphasis: {\r\n                textStyle: {\r\n                  color: \"#640000\",\r\n                },\r\n              },\r\n            },\r\n\r\n            data: this.echartsData,\r\n          },\r\n          {\r\n            type: \"scatter\",\r\n            coordinateSystem: \"geo\",\r\n            // 定位角标\r\n            symbol: \"pin\",\r\n            legendHoverLink: true,\r\n            symbolSize: [18, 24],\r\n            tooltip: {\r\n              show: true,\r\n\r\n              trigger: \"item\",\r\n              alwaysShowContent: false,\r\n              backgroundColor: \"rgba(0, 0, 0, 0.7)\",\r\n              padding: [0, 10, 8, 10],\r\n              roam: true,\r\n              hideDelay: 100,\r\n              triggerOn: \"mousemove\",\r\n              enterable: true,\r\n              borderColor: \"rgba(0, 0, 0, 0.7)\",\r\n              // 阴影，值越大阴影亮度越高\r\n              // shadowBlur: 8,\r\n              // shadowColor: \"#00FCFF\",\r\n              textStyle: {\r\n                color: \"#fff\",\r\n                fontSize: \"12\",\r\n                width: 20,\r\n                height: 30,\r\n                overflow: \"break\",\r\n              },\r\n              showDelay: 100,\r\n            },\r\n            // 这里渲染标志里的内容以及样式\r\n            label: {\r\n              show: true,\r\n              formatter(value) {\r\n                return value.data.value[2];\r\n              },\r\n              color: \"#fff\",\r\n            },\r\n            // 标志的样式\r\n            itemStyle: {\r\n              normal: {\r\n                color: \"rgba(15, 30, 51, 1)\",\r\n              },\r\n            },\r\n            label: {\r\n              normal: {\r\n                show: true,\r\n                formatter(value) {\r\n                  return value.data.name;\r\n                },\r\n                color: \"#fff\",\r\n                backgroundColor: \"rgba(108, 5, 243, 0.8)\",\r\n                padding: [10, 20, 10, 20],\r\n                fontSize: \"14\",\r\n                show: false,\r\n                borderRadius: 5,\r\n              },\r\n              emphasis: {\r\n                show: false,\r\n              },\r\n            },\r\n            itemStyle: {\r\n              normal: {\r\n                color: \"rgba(78, 84, 253, 0.9)\",\r\n                borderColor: \"#fff\",\r\n                borderWidth: 1,\r\n              },\r\n            },\r\n            // 数据格式，其中name,value是必要的，value的前两个值是数据点的经纬度，其他的数据格式可以自定义\r\n            // 至于如何展示，完全是靠上面的formatter来自己定义的\r\n\r\n            data: this.scatterData,\r\n            showEffectOn: \"render\",\r\n            rippleEffect: {\r\n              brushType: \"stroke\",\r\n            },\r\n            hoverAnimation: true,\r\n            zlevel: 1,\r\n          },\r\n        ],\r\n\r\n        visualMap: {\r\n          show: false,\r\n          type: \"continuous\",\r\n          // 这里最大值写死了，请根据实际需求进行变更\r\n          max: 5,\r\n          text: this.visualText,\r\n          calculable: true,\r\n          seriesIndex: [0],\r\n          inRange: {\r\n            // 由低到高\r\n            color: this.visualColor,\r\n          },\r\n\r\n          textStyle: {\r\n            color: \"#fff\",\r\n            map: \"china\",\r\n          },\r\n          bottom: \"8px\",\r\n          right: \"8px\",\r\n          backgroundColor: \"#313E52\",\r\n          padding: [10, 8, 10, 8],\r\n        },\r\n        graphic: {\r\n          type: \"text\",\r\n          x: 25,\r\n          y: 25,\r\n          style: {\r\n            text: \"返回\",\r\n            fill: \"#fff\",\r\n            font: 'bolder 2em \"Microsoft YaHei\", sans-serif'\r\n          },\r\n          onclick: () => {\r\n            // 利用函数的作用域，可以直接拿上面的name来用\r\n            if (this.citylist.length < 2) return;\r\n            this.lastCity = this.citylist[this.citylist.length - 2];\r\n            const name = Object.keys(this.lastCity)[0];\r\n            const [grahpName, graphJson] = getMap(name);\r\n            // 删除最后一个元素\r\n            this.citylist.pop();\r\n            // 很多操作重复了，你可以将公共部分抽离出来\r\n            option.geo.map = grahpName;\r\n            echarts.registerMap(grahpName, graphJson);\r\n            this.charts.setOption(option, true);\r\n          },\r\n        },\r\n      };\r\n\r\n      const [mapName, mapJson] = getMap(this.cityMapName);\r\n      option.geo.map = mapName;\r\n      // 地图注册，第一个参数的名字必须和option.geo.map一致\r\n      echarts.registerMap(mapName, mapJson);\r\n\r\n      this.charts.setOption(option);\r\n\r\n      // this.charts.off();\r\n      this.charts.on(\"click\", (dom) => {\r\n        // 阻止散点图点击事件\r\n        if (dom.seriesType === \"scatter\") return;\r\n        // 暴露点击事件\r\n        const { name: cityname, data } = dom;\r\n        const name = cityname ? cityname : Object.keys(this.lastCity)[0];\r\n        let code = \"\";\r\n        if (dom.componentType === \"series\") {\r\n          code = data?.areaUniCode ? data?.areaUniCode : this.lastCity[name];\r\n        } else {\r\n          code = this.lastCity[name];\r\n        }\r\n        const [mapName, mapJson] = getMap(name);\r\n        // console.log(mapJson);\r\n        if (mapJson) {\r\n          if (dom.componentType === \"series\") {\r\n            this.citylist.push({ [name]: code });\r\n          }\r\n          this.currentMapName = mapName;\r\n          this.mapClick(code, name);\r\n        }\r\n        if (!mapJson) return;\r\n\r\n        option.geo.map = mapName;\r\n        \r\n        // 设置为undefined，可以保证地图切换时总是居中\r\n        option.geo.center = undefined;\r\n        echarts.registerMap(mapName, mapJson);\r\n        this.charts.setOption(option);\r\n      });\r\n\r\n      this.$refs[\"charts\"].oncontextmenu = () => false;\r\n    },\r\n    // 向父组件提供点击事件，并提供点击省份的code和name\r\n    mapClick(code, name) {\r\n      this.$emit(\"mapClick\", { code, name });\r\n    },\r\n  },\r\n};\r\n</script>\r\n<style lang=\"scss\"></style>\r\n"]}]}